%table "xij.tsv"

#include "interp_field.h"
#include <string.h>
#include <math.h>

#include <gsl/gsl_errno.h>
#include <gsl/gsl_math.h>

/* 
 * Linear interpolation of a vector field
 * Input position is in Cartesian coordinates (um)
 * Output vector is normalized
 * NOTE: we check if position is in bounds
 */
#define C(j,i,k) ((size_t)(j) + (size_t)(i) * nx + (size_t)(k) * nx * ny)
void interp_field (
        const float * const restrict x, // array with x vector component
        const float * const restrict y, // array with y vector component
        const float * const restrict z, // array with z vector component
        const size_t nx, // number of voxels in x dimension
        const size_t ny, // number of voxels in y dimension
        const size_t nz, // number of voxels in z dimension
        const double vx, // voxel x size (um)
        const double vy, // voxel y size (um)
        const double vz, // voxel z size (um)
        const double ox, // origin of x coordinate (um)
        const double oy, // origin of y coordinate (um)
        const double oz, // origin of z coordinate (um)
        const double pos_in[static 3], // input XYZ position (um)
        double (*vec_out)[3] // output direction vector
        ) {

    %map xij %{
        /* normalize position to [0.0:dimension) */
        const double c${x} = (pos_in[${i}] - o${x}) / v${x};
        /* coordinate in [0:1] w.r.t. nearest boundaries */
        const double ${x}d = fmod(c${x} + 0.5,1.0);
        /* one minus the above */
        const double om${x}d = 1.0 - ${x}d;
        /* array index of 000 corner */
        const size_t ${j} = floor(c${x} - 0.5);
    %}

    if(%map [sep=`||`] xij %{ ${j} >= n${x} %}) {
        %map xij %{ (*vec_out)[${i}] = NAN; %}
        return; // outputs NAN vector
    }

    /* interpolate vector components */
    %snippet interp_component = (x,i) %{
    double res_${x};
    {
        double v[8];

        /* Get weighted values from all corners */
        v[0] = ${x}[C(j + 0,i + 0,k + 0)] * omxd * omyd * omzd;
        v[1] = ${x}[C(j + 0,i + 0,k + 1)] * omxd * omyd *   zd;
        v[2] = ${x}[C(j + 0,i + 1,k + 0)] * omxd *   yd * omzd;
        v[3] = ${x}[C(j + 0,i + 1,k + 1)] * omxd *   yd *   zd;
        v[4] = ${x}[C(j + 1,i + 0,k + 0)] *   xd * omyd * omzd;
        v[5] = ${x}[C(j + 1,i + 0,k + 1)] *   xd * omyd *   zd;
        v[6] = ${x}[C(j + 1,i + 1,k + 0)] *   xd *   yd * omzd;
        v[7] = ${x}[C(j + 1,i + 1,k + 1)] *   xd *   yd *   zd;

        /* Pairwise summation */
        v[0] = v[0] + v[1];
        v[2] = v[2] + v[3];
        v[4] = v[4] + v[5];
        v[6] = v[6] + v[7];

        v[0] = v[0] + v[2];
        v[4] = v[4] + v[6];

        res_${x} = v[0] + v[4];
    }
    %}
    %map xij | interp_component (#x,#i)

    /* normalize output vector */
    const double norm2 = res_x * res_x + res_y * res_y + res_z * res_z;
    const double norm = sqrt(norm2);
    const double norm_checked = norm > NORM_EPSILON ? norm : 1.0;

    %map xij %{
        (*vec_out)[${i}] = res_${x} / norm_checked;
    %}

#if DEBUG > 1
    info("%g %g %g |"
            " %g %g %g |"
            " %g %g %g |"
            " %g %g %g |"
            " %zu %zu %zu |"
            " %g %g %g",
            pos_in[0],pos_in[1],pos_in[2],
            cx,cy,cz,
            xd,yd,zd,
            omxd,omyd,omzd,
            j,i,k,
            (*vec_out)[0],(*vec_out)[1],(*vec_out)[2]);
#endif
}
#undef C

/*
 * Wrapper of interpolated orientation field for use with GSL ODE solver
 */
int dirfield(double t, const double y[], double f[], void *params) {
    %unused t;
    struct interp_params *p = (struct interp_params*)params;
    double vec_out[3];
    interp_field(p->x,p->y,p->z,
                 p->nx,p->ny,p->nz,
                 p->vx,p->vy,p->vz,
                 p->ox,p->oy,p->oz,
                 y,&vec_out);
    memcpy(f,vec_out,3 * sizeof(double));
    return GSL_SUCCESS;
}

/*
 * Get relative depth at position
 */
double get_rdepth(const double x, const double y, const double z, const void *params) {
    const struct interp_params *p = (const struct interp_params*)params;

    %map xij %{
        /* normalize position to [0.0:dimension) */
        const double c${x} = (${x} - p->o${x}) / p->v${x};
        /* array index of voxel */
        const size_t ${j} = floor(c${x});
    %}

    if(%map [sep=`||`] xij %{ ${j} >= p->n${x} %}) {
        return NAN;
    }

    size_t ix = (size_t)j + (size_t)i * p->nx + (size_t)k * p->nx * p->ny;

#if DEBUG > 2
    info("L %g %g %g [%zu, %zu, %zu] -> %g",
            x,y,z,j,i,k,p->rdepth[ix]);
#endif

    return p->rdepth[ix];
}

/*
 * Get relative depth at spline location
 */
double eval_spline_rdepth(const double t, const void *params) {
    const struct interp_params *p = (const struct interp_params*)params;

    %map xij %{
        const double ${x} = gsl_spline_eval(p->spl${x},t,p->acc${x}); // evaluate spline
    %}

    return get_rdepth(x,y,z,params);
}

/*
 * Get size of derivative along streamline (measure length increment)
 */
double get_spline_dlen(const double t, const void *params) {
    const struct interp_params *p = (const struct interp_params*)params;

    %map xij %{
        const double ${x}_0 = gsl_spline_eval(p->spl${x},t,p->acc${x}); // evaluate spline at t
        const double ${x} = gsl_spline_eval(p->spl${x},t + p->dt,p->acc${x}); // evaluate spline at t + dt
    %}

    if(isnan(x) || isnan(y) || isnan(z)) return 0.0;

    double len = gsl_hypot3(x - x_0,y - y_0,z - z_0); // length of segment from t -> t + dt
#if DEBUG > 1
    fprintf(stderr,"%g: %g %g %g -> %g: %g %g %g = %g\n",t,x_0,y_0,z_0,t + p->dt,x,y,z,dist);
#endif

    return len;
}
