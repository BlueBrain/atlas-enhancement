%table "xij.tsv"

#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include <math.h>
#include <assert.h>

#include "interp_field.h"
#include "streamline.h"

#include <gsl/gsl_errno.h>

%snippet std:logging_prefix = %{ "flatpath" %}
%include "cmod/common.hm"
%include "cmod/logging.hm"

int compute_streamline(
        gsl_odeiv2_driver *d, // GSL ODE solver driver
        const double yinit[3], // initial position
        size_t ix, // streamline index
        const double h, // integration step size
        const size_t maxiter, // maximum number of iterations
        const size_t nstep, // number of integration steps per iteration
        const struct interp_params *p, // interpolator parameters
        size_t *sn_out, // number of points in streamline
        double **sx_out // streamline points
        ) {
    int retcode = 0;

    %snippet iter_direction = (d,direction,sgn,val) %{
        /* ${direction} time */
        size_t i${d}last = maxiter;
        double save${d}[maxiter][3];
        memset(save${d},0x0,maxiter * 3 * sizeof(double));
        {
            double t = 0.0;
            double y[3] = { yinit[0], yinit[1], yinit[2] };
            bool break_next = false;
            for(size_t i=0;i<maxiter;i++) {
                int s = gsl_odeiv2_driver_apply_fixed_step(d,&t,${sgn} * h,nstep,y); // advance position

                if(s != GSL_SUCCESS) {
                    error("driver returned %d for streamline %zu (%g %g %g)",
                          s,ix,yinit[0],yinit[1],yinit[2]);
                    i${d}last = i;
                    break;
                }

                double layer = get_rdepth(y[0],y[1],y[2],p); // layer at new position

                if(break_next ||
                        isnan(y[0]) || isnan(y[1]) || isnan(y[2]) || isnan(layer)) {
#if DEBUG
                    info("stopping ${direction} at iteration %zu: %g %g %g -> %g",
                         i,y[0],y[1],y[2],layer);
#endif
                    i${d}last = i;
                    break;
                }

#if DEBUG
                info("iteration %zu: %g %g %g -> %g",
                     i,y[0],y[1],y[2],layer);
#endif

                memcpy(save${d}[i],y,3 * sizeof(double)); // store position along streamline
            }
        }
        if(i${d}last == maxiter) {
            warn("streamline %zu (%g %g %g) may exceed %zu ${direction} iterations",
                 ix,yinit[0],yinit[1],yinit[2],i${d}last);
        }
    %}
    %recall iter_direction (f,forward,1,ONE) (b,backwards,-1,ZERO)

    { // store streamline
        size_t sn = iblast + 1 + iflast; // number of points in streamline
        double *sx = malloc(3 * sn * sizeof(double));

        size_t k = 0;
        /* backward steps in reverse */
        for(size_t i=0;i<iblast;i++) {
            size_t j = iblast - 1 - i;
            if(saveb[j][0] == 0.0 || saveb[j][1] == 0.0 || saveb[j][2] == 0.0)
                error("zero found in backward streamline %zu",ix);
            %map xij %{ sx[3 * k + ${i}] = saveb[j][${i}]; %}
            k++;
        }
        /* initial point */
        %map xij %{ sx[(size_t)${i} + 3 * k] = yinit[${i}]; %}
        k++;
        /* forward steps */
        for(size_t i=0;i<iflast;i++) {
            if(savef[i][0] == 0.0 || savef[i][1] == 0.0 || savef[i][2] == 0.0)
                error("zero found in forward streamline %zu",ix);
            %map xij %{ sx[3 * k + ${i}] = savef[i][${i}]; %}
            k++;
        }
        assert(k == sn);

        *sn_out = sn;
        *sx_out = sx;
    }

    return retcode;
}

#define NEAR_ZERO(x) (fabs(x) < p->eps_zero)
#define NEAR_ONE(x) (fabs(1.0 - (x)) < p->eps_one)

%snippet setup_splines = (verbose_tinit = false) %{
    %map xij %%{
        gsl_interp_accel *acc$${x} = gsl_interp_accel_alloc();
        gsl_spline *spl$${x} = gsl_spline_alloc(gsl_interp_linear, sn);
    %%}

    double tinit = -1.0; // initial dummy value
    double *t = malloc(sn * sizeof(double));
    %map xij %%{ double *$${x} = malloc(sn * sizeof(double)); %%}
    for(size_t i=0;i<sn;i++) {
        t[i] = (double)i / (sn - 1);
        %map xij %%{ $${x}[i] = sx[3 * i + $${i}]; %%}
        if(x[i] == yinit[0] && y[i] == yinit[1] && z[i] == yinit[2])
            tinit = t[i]; // update parameter value for initial point
    }
    if(${verbose_tinit}) {
        if(tinit == -1.0) { error("No tinit found for streamline %zu",ix); }
        else if(tinit == 0.0 || tinit == 1.0) warn("Bad tinit = %g found for streamline %zu",tinit,ix);
    }

    %map xij %%{ gsl_spline_init(spl$${x},t,$${x},sn); %%}
%}

%snippet cleanup_splines = %{
    %map xij %%{
        gsl_spline_free(spl$${x});
        gsl_interp_accel_free(acc$${x});
        free($${x});
    %%}
    free(t);
%}

/*
 * This function equals
 * -0.5 at relative depth < projection surface
 * and +0.5 at relative depth >= projection surface,
 * so it attains its zero at the projection surface
 */
static double streamln(const double t, void *params) {
    const struct interp_params *p = (const struct interp_params*)params;

    const double rdepth = eval_spline_rdepth(t,params);
    const double f = (p->proj_side == BOTTOM)
        ? (rdepth <= p->proj_rdepth ? -0.5 : 0.5) // bottom
        : (rdepth <  p->proj_rdepth ? -0.5 : 0.5) // top
        ;

    return f;
}

int streamline_intersection(
        const size_t ix, // point index
        const size_t sn, // number of points in streamline
        const double *sx, // points in streamline
        const double yinit[3], // initial position
        struct interp_params *p, // parameters
        const bool full_only, // only full streamlines?
        gsl_root_fsolver *rs, // root solver
        double isec_o[3] // output intersection
        ) {
    double isec[3] = { NAN, NAN, NAN };

    %recall setup_splines
    %map xij %{ p->spl${x}=spl${x}; p->acc${x}=acc${x}; %}

#ifdef DEBUG
    /* print full streamline */
    for(size_t i=0;i<sn;i++)
        fprintf(stderr,"%g %g %g %g %g\n",
                t[i],x[i],y[i],z[i],get_rdepth(x[i],y[i],z[i],p));
#endif

    /* find root */
    const int max_iter = 300;
    gsl_function F = { .function=&streamln, .params=p };
    int status = gsl_root_fsolver_set(rs,&F,0.0,1.0);

    if(status != GSL_SUCCESS ||
            (full_only && (!NEAR_ZERO(eval_spline_rdepth(0.0,p))
                           || !NEAR_ONE(eval_spline_rdepth(1.0,p))))) { // init fail
#if DEBUG
        error("Init fail: %g (%.6f : %s) %g (%.6f : %s) NAN",
                streamln(0.0,p),eval_spline_rdepth(0.0,p),
                NEAR_ZERO(eval_spline_rdepth(0.0,p)) ? "true" : "false",
                streamln(1.0,p),eval_spline_rdepth(1.0,p),
                NEAR_ONE(eval_spline_rdepth(1.0,p)) ? "true" : "false");
        warn("GSL: %s (%d)",gsl_strerror(status),status);
#endif
    } else { // init success
#if DEBUG
        info("Init success: %g (%g) %g (%g)",
                streamln(0.0,p),eval_spline_rdepth(0.0,p),
                streamln(1.0,p),eval_spline_rdepth(1.0,p));
#endif
        int iter = 0;
        double root;
        do {
            iter++;
            status = gsl_root_fsolver_iterate(rs);
            root = gsl_root_fsolver_root(rs);
            double x_lo = gsl_root_fsolver_x_lower(rs);
            double x_hi = gsl_root_fsolver_x_upper(rs);
            status = gsl_root_test_interval(x_lo, x_hi, 0.0, 1e-8);

#if DEBUG
            if(status == GSL_SUCCESS) fprintf(stderr,"Converged:\n");
            fprintf(stderr,"%5d [%g = %g, %g = %g] %g = %g (%g)\n",
                    iter,
                    x_lo, streamln(x_lo,p),
                    x_hi, streamln(x_hi,p),
                    root, streamln(root,p),
                    x_hi - x_lo);
#endif
        }
        while(status == GSL_CONTINUE && iter < max_iter);

        if(status == GSL_SUCCESS) { // root found
            %map xij %{ isec[${i}] = gsl_spline_eval(spl${x},root,acc${x}); %}
        }
    }

    %recall cleanup_splines
    %map xij %{ p->spl${x}=NULL; p->acc${x}=NULL; %}

    isec_o[0] = isec[0];
    isec_o[1] = isec[1];
    isec_o[2] = isec[2];

    return 0;
}

int streamline_measure(
        const size_t ix, // point index
        const size_t sn, // number of points in streamline
        const double *sx, // points in streamline
        const double yinit[3], // initial position
        struct interp_params *p, // parameters
        const bool do_height, // height or depth?
        const size_t nstep_path, // number of integration steps
        double *val_o // output value
        ) {
    double val = NAN;

    %recall setup_splines (verbose_tinit = true)
    %map xij %{ p->spl${x}=spl${x}; p->acc${x}=acc${x}; %}

    if(NEAR_ZERO(eval_spline_rdepth(0.0,p))
            && NEAR_ONE(eval_spline_rdepth(1.0,p))) { // full streamline
        // height starts at 0.0 and goes in the positive direction
        // depth starts at 1.0 and goes in the negative direction
        p->dt = do_height
             ? 1.0 / nstep_path // positive dt
             : - (1.0 - tinit) / nstep_path; // negative dt
        double t = do_height ? 0.0 : 1.0; // starting point

        double sum = 0.0;
        for(size_t i = 0; i < nstep_path; ++i) { // integrate path length
            sum += get_spline_dlen(t,p);
            t += p->dt;
        }

        val = sum;
    }

    %recall cleanup_splines
    %map xij %{ p->spl${x}=NULL; p->acc${x}=NULL; %}

    *val_o = val;

    return 0;
}
